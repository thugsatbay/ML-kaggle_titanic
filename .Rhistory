train[train[11]=="",]
train[train[12]=="",]
train[train[1:13]=="",]
train[train=="",1:10]
train[train[1:20]=="",1:10]
train[train[1:20,]=="",1:10]
train[is.na(train)]
is.na(train)
is.na(train[1:20,])
train[1,]
train$Deck<-factor(sapply(train$Cabin, function(x) strsplit(as.vector(x),NULL)[[1]][1]))
train[1,]
strsplit(train$Ticket[1],NULL)
train$Ticket[1]
strsplit(as.vector(train$Ticket[1]),NULL)
train[1:20,c(train$Cabin,train$Ticket)]
train[1:20,c(9,11)]
train[1:20,c(3,10,11)]
train[1:20,c(3,10,11,16)]
train[1:20,c(3,10,16)]
train$Fare[!is.na(train$Deck)]
train$Fare[is.na(train$Deck)]
train$Fare[!is.na(train$Deck)]
train$Fare[train$Deck=="C"]
train$Fare[train$Deck=="C" & (!is.na(train$Deck))]
summary(train$Fare[train$Deck=="C" & (!is.na(train$Deck))])
summary(train$Fare[train$Deck=="C" & (!is.na(train$Deck)) & train$Pclass=="1"])
summary(train$Fare[train$Deck=="C" & (!is.na(train$Deck)) & train$Pclass=="2"])
summary(train$Fare[train$Deck=="C" & (!is.na(train$Deck)) & train$Pclass=="3"])
summary(train$Fare[train$Deck=="C" & (!is.na(train$Deck)) & train$Pclass=="3"])
levels(factor(train$Deck))
summary(train$Fare[train$Deck=="A" & (!is.na(train$Deck)) & train$Pclass=="1"])
summary(train$Fare[train$Deck=="A" & (!is.na(train$Deck)) & train$Pclass=="2"])
summary(train$Fare[train$Deck=="A" & (!is.na(train$Deck)) & train$Pclass=="3"])
summary(train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass=="3"])
summary(train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass=="1"])
summary(train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass=="1" & train$Embarked=="C"])
summary(train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass=="1" & train$Embarked=="E"])
median(train$Embarked)
levels(factor(train$Embarked))
summary(train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass=="1" & train$Embarked=="Q"])
summary(train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass=="1" & train$Embarked=="S"])
train[1,]
summary(train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
summary(train$Fare[train$Deck=="A" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
summary(train$Fare[train$Deck=="C" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
summary(train$Fare[train$Deck=="D" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
summary(train$Fare[train$Deck=="E" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
summary(train$Fare[train$Deck=="F" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
summary(train$Fare[train$Deck=="G" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
summary(train$Fare[train$Deck=="T" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
train$Fare[train$Deck=="T" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"]
train$Fare[train$Deck=="T" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"]
train$Fare[train$Deck=="T" & train$Pclass=="3" & train$Embarked=="S"]
train$Fare[train$Deck=="G" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"]
train$Fare[train$Deck=="T" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"]
train$Fare[train$Deck=="G" & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"]
sapply(c("A","B","C","D","G","T"),function(x) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass=="3" & train$Embarked=="S"])
factor(train$Deck)
sapply(c("A","B","C","D","E","F","G","T"), function(x) (sapply(c("1","2","3"), function(y) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked=="S"])))
sapply(c("A","B","C","D","E","F","G","T"), function(x) (sapply(c("1","2","3"), function(y) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked=="S"])))[1]
levels(factor(train$Embarked))
sapply(c("A","B","C","D","E","F","G","T"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("C","Q","S"), function (z) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==z])))))
store_info<-sapply(c("A","B","C","D","E","F","G","T"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("C","Q","S"), function (z) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==z])))))
str(store_info)
summary(store_info)
store_info[1]
help("sapply")
store_info
train$Fare[train$Deck=="A" & (!is.na(train$Deck)) & train$Pclass==1 & train$Embarked=="C"]
train$Fare[train$Deck=="A" & (!is.na(train$Deck)) & train$Pclass==1 & train$Embarked=="Q"]
train$Fare[train$Deck=="A" & (!is.na(train$Deck)) & train$Pclass==1 & train$Embarked=="S"]
train$Fare[train$Deck=="B" & (!is.na(train$Deck)) & train$Pclass==1 & train$Embarked=="S"]
mean(store_info[1])
mean(store_info[[1])
mean(store_info[[1]])
sapply(seq(72),function(x) mean(store_info[[x]]))
train[1,]
store_info<-sapply(c("A","B","C","D","E","F","G","T")s, function(x) (sapply(c("1","2","3"), function(y) (sapply(c("C","Q","S"), function (z) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==z])))))
store_info<-sapply(c("A","B","C","D","E","F","G","T"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("C","Q","S"), function (z) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==z])))))
str(store_info)
summary(store_info)
store_info[1]
store_indo
store_info
train[1,]
levels(factor(train$Cabin))
levels(factor(train$Dexk))
levels(factor(train$Deck))
store_info
train[1,]
store_info[[69]]
store_info[[70]]
store_info[[71]]
store_info[[72]]
store_info[9,E]
store_info[9,"E"]
store_info_mean<-sapply(seq(72),function(x) mean(store_info[[x]]))
store_info_mean
train[1,]
mean(store_info[1,"C"])
store_info[1, "C"]
mean(store_info[1,"C"])
mean(as.vector(store_info[1,"C"])
mean(as.vector(store_info[1,"C"]))
mean(as.vector(store_info[[3]]))
mean(as.vector(store_info[[1]]))
mean(as.vector(store_info[[2]]))
mean(as.vector(store_info[[10]]))
mean(as.vector(store_info[[66]]))
names(store_info)
names(store_info[[1]])
store_info<-sapply(c("A","B","C","D","E","F","G","T"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("C","Q","S"), function (z) train$Fare[train$Deck==x & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==z],USE.NAMES = TRUE)))))
str(store_info)
summary(store_info)
store_info_mean<-sapply(seq(72),function(x) mean(store_info[[x]]))
names(store_info)
names(store_info[[1]])
store_info
store_info[1,"T"]
store_info[9,"T"]
store_info[3,"T"]
test<-data.frame(c("C","Q","S"),c(1,2,3))
test
help("data.frame")
test<-data.frame(c("C","Q","S"),c(1,2,3),names=c("Embarked","Mapping"))
test<-data.frame(c("C","Q","S"),c(1,2,3),col.names=c("Embarked","Mapping"))
names(test)
test<-data.frame(Embarked=c("C","Q","S"),Mapping=c(1,2,3))
test
test$Mapping[test$Embarked=="C"]
store_info
store_info[7,"C"]
name(store_info[7,"C"])
names(store_info[7,"C"])
train[1,]
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x],USE.NAMES = TRUE)))))
store_info
emabarkedMapping_Info<-data.frame(Embarked=c("1","2","3"),Start=c(1,2,3),End=c(8,16,24))
embarkedMapping_Info<-data.frame(Embarked=c("1","2","3"),Start=c(1,2,3),End=c(8,16,24))
embarkedMapping_Info
pClassMapping_Info<-embarkedMapping_Info
embarkedMapping_Info<-data.frame(Embarked=c("C","S","Q",c(0,23,47)))
store_info[[1:4]]
store_info[1:4
}
store_info[1:4]
embarkedMapping_Info<-data.frame(Embarked=c("C","S","Q",c(1,24,48)))
pClassMapping_Info<-data.frame(Embarked=c("1","2","3"),Mapping=c(0,8,16))
store_info[embarkedMapping_Info[train$Embarked[1]]+pClassMapping_Info[train$Pclass[1]]]
embarkedMapping_Info[train$Embarked[1]
embarkedMapping_Info[train$Embarked[1]]
embarkedMapping_Info[train$Embarked[1]]
train$Embarked[1]
emabarkedMapping_Info
embarkedMapping_Info<-data.frame(Embarked=c("C","S","Q",c(1,24,48)))
store_info[embarkedMapping_Info[train$Embarked[1]]+pClassMapping_Info[train$Pclass[1]]]
embarkedMapping_Info
embarkedMapping_Info<-data.frame(Embarked=c("C","S","Q"),Mapping=c(1,24,48))
pClassMapping_Info<-data.frame(PClass=c("1","2","3"),Mapping=c(0,8,16))
View(emabarkedMapping_Info)
View(emabarkedMapping_Info)
View(emabarkedMapping_Info)
View(emabarkedMapping_Info)
embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==train$Embarked[1]]
embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]
store_info[embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]]
embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
embarkedMapping_Info<-data.frame(Embarked=c("C","S","Q"),Mapping=c(1,25,49))
embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
store_info[embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]:(embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]+8)]
store_info
store_info[72]
store_info[73]
store_info[71:72]
store_info[71:73]
store_info[embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]:(embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]+8)]
(embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]+8)
store_info[41:49]
store_info[embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]:(embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]+7)]
embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])
]
embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
store_info[valMod:(valMod+7)]
min(2,3)
max(train$Fare,0)
max(train$Fare)
max(train$Fare,rm.na=TRUE)
max(train$Fare,rm.na=FALSE)
help("max")
help("max.col")
help("max")
max(train$Fare,rm.na=TRUE)
levels(train$Fare)
levels(factor(train$Fare))
max(as.vector(train$Fare))
max(as.vector(train$Fare),na.rm=TRUE)
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
store_info[valMod:(valMod+7)]
store_info
sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tem<-0
sapply(seq(8),function(x) temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp))
sapply(seq(8),function(x) temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp))
temp
meanPossibleCostDeck[1]
meanPossibleCostDeck<-complete.cases((meanPossibleCostDeck))
meanPoss
meanPossibleCostDeck
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
meanPossibleCostDeck
meanPossibleCostDeck<-meanPossibleCostDeck[!is.nan(meanPossibleCostDeck)]
meanPossibleCostDeck
sapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x]){temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)})
sapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x]) temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp) else )
sapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x]) temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp) else temp<-temp )
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x]) temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp) else temp<-temp )
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x]) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else }temp<-temp} )
sapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x]) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else }temp<-temp} )
sapply(meanPossibleCostDeck,function(x) if(!is.nan(x)) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else }temp<-temp} )
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x])) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else }temp<-temp} )
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x])) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else {temp<-temp} )
temp
min(abs(meanPossibleCostDeck[1]-as.vector(train$Fare[1])),temp)
temp<-0
min(abs(meanPossibleCostDeck[1]-as.vector(train$Fare[1])),temp)
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x])) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else {temp<-temp} )
temp
!is.nan(meanPossibleCostDeck[x])
!is.nan(meanPossibleCostDeck[1])
meanPossibleCostDeck
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
meanPossibleCostDeck
temp<-0
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x])) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else {temp<-temp} )
temp
temp<-max(as.vector(train$Fare))
temp
temp<-max(as.vector(train$Fare),na.rm=TRUE)
temp
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x])) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else {temp<-temp} )
temp
lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x])) {temp<-min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else {} )
temp
abs(meanPossibleCostDeck[6]-as.vector(train$Fare[1]))
temp<-lapply(seq(8),function(x) if(!is.nan(meanPossibleCostDeck[x])) {min(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1])),temp)} else {temp} )
temp
pDeckMapping_Info<-data.frame(Deck=seq(8),Mapping=c("A","B","C","D","E","F","G","T"))
tempMax<-max(as.vector(train$Fare),na.rm=TRUE)
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1]))<tempMin){
print("lol")#train$Deck<-pDeckMapping_Info[x]
}
}
}
train$Deck[1]
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1]))<tempMin){
train$Deck[1]<-pDeckMapping_Info[x]
}
}
}
pDeckMapping_Info<-data.frame(Deck=seq(8),Mapping=c("A","B","C","D","E","F","G","T"))
pDeckMapping_Info[1]
seq(6)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1]))<tempMin){
train$Deck[1]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
train$Fare[1]
train[1,]
store_info
train[1,]
embarkedMapping_Info<-data.frame(Embarked=c("C","S","Q"),Mapping=c(1,24,48))
pClassMapping_Info<-data.frame(PClass=c("1","2","3"),Mapping=c(0,8,16))
pDeckMapping_Info<-data.frame(Deck=seq(8),Mapping=c("A","B","C","D","E","F","G","T"))
embarkedMapping_Info<-data.frame(Embarked=c("C","Q","S"),Mapping=c(1,24,48))
pClassMapping_Info<-data.frame(PClass=c("1","2","3"),Mapping=c(0,8,16))
pDeckMapping_Info<-data.frame(Deck=seq(8),Mapping=c("A","B","C","D","E","F","G","T"))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1]))<tempMin){
train$Deck[1]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
train[1,]
train$Fare[train$Deck="T"]
train$Fare[train$Deck=="T"]
store_info[23,"S"]
train$Fare[train$Deck=="T" & (!is.na(train$Deck))]
embarkedMapping_Info<-data.frame(Embarked=c("C","Q","S"),Mapping=c(1,24,48))
pClassMapping_Info<-data.frame(PClass=c("1","2","3"),Mapping=c(0,8,16))
pDeckMapping_Info<-data.frame(Deck=seq(8),Mapping=c("A","B","C","D","E","F","G","T"))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
meanPossibleCostDeck
valMod
embarkedMapping_Info<-data.frame(Embarked=c("C","Q","S"),Mapping=c(1,25,49))
pClassMapping_Info<-data.frame(PClass=c("1","2","3"),Mapping=c(0,8,16))
pDeckMapping_Info<-data.frame(Deck=seq(8),Mapping=c("A","B","C","D","E","F","G","T"))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[1])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[1])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[1]))<tempMin){
train$Deck[1]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
train[1,]
train$Fare[train$Deck=="G" & (!is.na(train$Deck))]
train[2,]
train[3,]
is.Na(train$Deck[3])
is.na(train$Deck[3])
length(train)
length(train$PassengerId)
for(y in seq(length(train$PassengerId))){
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
}
}
train[1:20,]
tail(train)
train$Deck
for(y in seq(length(train$PassengerId))){
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
}
}
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
}
}
train[1044,]
train$Cabin
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
}
}
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
print (valMod)
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
}
}
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
print (meanPossibleCostDeck)
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
}
}
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
print (meanPossibleCostDeck)
print (train$Fare[y])
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}
}
}
train$Fare[1044,]
train$Fare[1044]
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
if(!is.na(train$Fare)){
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}}
}
}
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
if(!is.na(train$Fare[y])){
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}}
}
}
train[is.na(train$Deck)]
train[is.na(train$Deck),]
train$Fare[train$Embarked=="S" & train$Pclass=="3" & train$PassengerId!=1044]
summary(train$Fare[train$Embarked=="S" & train$Pclass=="3" & train$PassengerId!=1044])
summary(train$Fare[train$Embarked=="S" & train$Pclass=="3" & train$PassengerId!=1044 prefix<-"Mr"]
summary(train$Fare[train$Embarked=="S" & train$Pclass=="3" & train$PassengerId!=1044 train$prefix<-"Mr"]
summary(train$Fare[train$Embarked=="S" & train$Pclass=="3" & train$PassengerId!=1044 train$prefix<-"Mr"])
summary(train$Fare[train$Embarked=="S" & train$Pclass=="3" & train$PassengerId!=1044 train$prefix=="Mr"])
summary(train$Fare[train$Embarked=="S" & train$Pclass=="3" & train$PassengerId!=1044 & train$prefix=="Mr"])
train$Fare[1044]<-mean(8.050,7.925)
tempMin<-max(as.vector(train$Fare),na.rm=TRUE)
for(y in seq(length(train$PassengerId))){
print (y)
if(is.na(train$Deck[y])){
store_info<-sapply(c("C","Q","S"), function(x) (sapply(c("1","2","3"), function(y) (sapply(c("A","B","C","D","E","F","G","T"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))
valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]
meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))
if(!is.na(train$Fare[y])){
for (x in seq(8)){
if(!is.nan(meanPossibleCostDeck[x])){
if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){
train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]
}
}
}}
}
}
train[1044,]
train[is.na(train$Deck)]
train[is.na(train$Deck)]
head(train)
