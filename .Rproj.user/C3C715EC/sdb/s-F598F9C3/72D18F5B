{
    "collab_server" : "",
    "contents" : "#Loading all data\ntrain<-read.csv(\"train.csv\",header = TRUE)\ntest<-read.csv(\"test.csv\",header=TRUE)\ntest$Survived<-NA\n\n#Adding all data to make it in standard form\n#train<-train[,c(1,seq(3,12))]\ntrain<-rbind(train,test)\n\n#Gets the Prefix Of Name that helps to tell the status of person\ntrain$prefix<-sub('(.*, )','',train$Name) \ntrain$prefix<-sub('(\\\\..*)','',train$prefix)\n\n#Correecting Prefix Data\ntrain$prefix[train$prefix==\"Mlle\"]<-'Miss'\ntrain$prefix[train$prefix==\"Ms\"]<-'Miss'\ntrain$prefix[train$prefix==\"Mme\"]<-'Mr'\n\n#The new parameter created count\nsummaryOfPrefix<-summary(factor(train$prefix))\nsummaryOfPrefix\nrarePrefix<-names(summaryOfPrefix[summaryOfPrefix<10])\ntrain$prefix[train$prefix %in% rarePrefix]<-'RarePrefix'\n#Check The New Prefix Column Data\nsummary(factor(train$prefix))\n\n#Family Parameter\ntrain$sizeFamily<-train$Parch+train$SibSp+1\n\n#\n##\n###Graphs Visualization Learning\n##\n#\n#A graph To demonstrate the Relation between survival and your status as a male, female\nggplot(train[1:891,], aes(x = prefix,fill=factor(Survived))) +\n  geom_bar(stat='count', position='dodge',color=\"green\",alpha=.9) +\n  labs(x = 'Family Size')\n#A pie chart about the ratio of married to unmarried women\nfemalePrefixses<-table(train[train$Sex==\"female\",13])\nfemalePrefixsesCount<-as.vector(femalePrefixses)\nfemalePrefixsesTitle<-names(femalePrefixses)\npctF<-round((femalePrefixsesCount/sum(femalePrefixsesCount))*100)\npctF<-paste(femalePrefixsesTitle,pctF,sep=\" \")\npctF<-paste(pctF,\"%\",sep=\"\")\npie(femalePrefixsesCount, labels = pctF, col=rainbow(length(pctF)), main=\"Pie Chart of Female Married, Younger/Older Distribution\")\n#A pie chart about the ratio of men to children\nmalePrefixses<-table(train[train$Sex==\"male\",13])\nmalePrefixsesCount<-as.vector(malePrefixses)\nmalePrefixsesTitle<-names(malePrefixses)\nMpct<-round((malePrefixsesCount/sum(malePrefixsesCount))*100)\nMpct<-paste(malePrefixsesTitle,Mpct,sep=\" \")\nMpct<-paste(Mpct,\"%\",sep=\"\")\npie(malePrefixsesCount, labels = Mpct, col=rainbow(length(Mpct)), main=\"Pie Chart of Male and Boys Distribution\")\n#A graph To demonstrate the Relation between survival and group size\nggplot(train[1:891,], aes(x = sizeFamily,fill=factor(Survived))) +\n  geom_bar(stat='count', position='stack',color=\"green\",alpha=.9) +\n  scale_x_continuous(breaks=c(1:11)) +\n  labs(x = 'Family Size')\n# Show family size by survival using a mosaic plot\ntrain$familySizeDimension[train$sizeFamily == 1] <- 'alone'\ntrain$familySizeDimension[train$sizeFamily < 5 & train$sizeFamil > 1] <- 'small'\ntrain$familySizeDimension[train$sizeFamily > 4] <- 'big'\nmosaicplot(table(train$familySizeDimension, train$Survived), main='Family Size by Survival', shade=TRUE)\n\n#Finding the deck information that is necessary as data is incomplete we will be only be going with deck and not room numbers\ntrain$Deck<-factor(sapply(train$Cabin, function(x) strsplit(as.vector(x),NULL)[[1]][1]))\n\n#For 1044 no fare is given so we estimate the Price\nsummary(train$Fare[train$Embarked==\"S\" & train$Pclass==\"3\" & train$PassengerId!=1044 & train$prefix==\"Mr\"])\ntrain$Fare[1044]<-mean(8.050,7.925)\n\n#\n##\n###Estimated Deck Using Fare Pclass and Embarked, should also have used family size\n##\n#\ntempMin<-max(as.vector(train$Fare),na.rm=TRUE)\nembarkedMapping_Info<-data.frame(Embarked=c(\"C\",\"Q\",\"S\"),Mapping=c(1,25,49))\npClassMapping_Info<-data.frame(PClass=c(\"1\",\"2\",\"3\"),Mapping=c(0,8,16))\npDeckMapping_Info<-data.frame(Deck=seq(8),Mapping=c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"T\"))\nfor(y in seq(length(train$PassengerId))){\nprint (y)\n  if(is.na(train$Deck[y])){\n  store_info<-sapply(c(\"C\",\"Q\",\"S\"), function(x) (sapply(c(\"1\",\"2\",\"3\"), function(y) (sapply(c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"T\"), function (z) train$Fare[train$Deck==z & (!is.na(train$Deck)) & train$Pclass==y & train$Embarked==x])))))\n  valMod<-embarkedMapping_Info$Mapping[embarkedMapping_Info$Embarked==as.vector(train$Embarked[y])]+pClassMapping_Info$Mapping[pClassMapping_Info$PClass==as.vector(train$Pclass[y])]\n  meanPossibleCostDeck<-sapply(seq(8),function(x) mean(store_info[valMod:(valMod+7)][[x]]))\n  if(!is.na(train$Fare[y])){\n  for (x in seq(8)){\n    if(!is.nan(meanPossibleCostDeck[x])){\n      if(abs(meanPossibleCostDeck[x]-as.vector(train$Fare[y]))<tempMin){\n          train$Deck[y]<-pDeckMapping_Info$Mapping[pDeckMapping_Info$Deck==x]\n        }\n      }\n    }}\n}\n}",
    "created" : 1474066794633.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1174876165",
    "id" : "72D18F5B",
    "lastKnownWriteTime" : 1474348844,
    "last_content_update" : 1474348844673,
    "path" : "E:/git/kaggle/titanic/pullRefineDataTitanic.R",
    "project_path" : "pullRefineDataTitanic.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}